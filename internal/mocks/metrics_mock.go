// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ozoncp/ocp-certificate-api/internal/metrics (interfaces: Metrics)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockMetrics is a mock of Metrics interface.
type MockMetrics struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsMockRecorder
}

// MockMetricsMockRecorder is the mock recorder for MockMetrics.
type MockMetricsMockRecorder struct {
	mock *MockMetrics
}

// NewMockMetrics creates a new mock instance.
func NewMockMetrics(ctrl *gomock.Controller) *MockMetrics {
	mock := &MockMetrics{ctrl: ctrl}
	mock.recorder = &MockMetricsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetrics) EXPECT() *MockMetricsMockRecorder {
	return m.recorder
}

// CreateCounterInc mocks base method.
func (m *MockMetrics) CreateCounterInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateCounterInc")
}

// CreateCounterInc indicates an expected call of CreateCounterInc.
func (mr *MockMetricsMockRecorder) CreateCounterInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCounterInc", reflect.TypeOf((*MockMetrics)(nil).CreateCounterInc))
}

// MultiCreateCounterInc mocks base method.
func (m *MockMetrics) MultiCreateCounterInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "MultiCreateCounterInc")
}

// MultiCreateCounterInc indicates an expected call of MultiCreateCounterInc.
func (mr *MockMetricsMockRecorder) MultiCreateCounterInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MultiCreateCounterInc", reflect.TypeOf((*MockMetrics)(nil).MultiCreateCounterInc))
}

// UpdateCounterInc mocks base method.
func (m *MockMetrics) UpdateCounterInc() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "UpdateCounterInc")
}

// UpdateCounterInc indicates an expected call of UpdateCounterInc.
func (mr *MockMetricsMockRecorder) UpdateCounterInc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounterInc", reflect.TypeOf((*MockMetrics)(nil).UpdateCounterInc))
}
