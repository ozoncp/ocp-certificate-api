// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ocp_certificate_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OcpCertificateApiClient is the client API for OcpCertificateApi service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OcpCertificateApiClient interface {
	MultiCreateCertificatesV1(ctx context.Context, in *MultiCreateCertificatesV1Request, opts ...grpc.CallOption) (*MultiCreateCertificatesV1Response, error)
	CreateCertificateV1(ctx context.Context, in *CreateCertificateV1Request, opts ...grpc.CallOption) (*CreateCertificateV1Response, error)
	GetCertificateV1(ctx context.Context, in *GetCertificateV1Request, opts ...grpc.CallOption) (*GetCertificateV1Response, error)
	ListCertificateV1(ctx context.Context, in *ListCertificateV1Request, opts ...grpc.CallOption) (*ListCertificateV1Response, error)
	UpdateCertificateV1(ctx context.Context, in *UpdateCertificateV1Request, opts ...grpc.CallOption) (*UpdateCertificateV1Response, error)
}

type ocpCertificateApiClient struct {
	cc grpc.ClientConnInterface
}

func NewOcpCertificateApiClient(cc grpc.ClientConnInterface) OcpCertificateApiClient {
	return &ocpCertificateApiClient{cc}
}

func (c *ocpCertificateApiClient) MultiCreateCertificatesV1(ctx context.Context, in *MultiCreateCertificatesV1Request, opts ...grpc.CallOption) (*MultiCreateCertificatesV1Response, error) {
	out := new(MultiCreateCertificatesV1Response)
	err := c.cc.Invoke(ctx, "/ocp.certificate.api.OcpCertificateApi/MultiCreateCertificatesV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCertificateApiClient) CreateCertificateV1(ctx context.Context, in *CreateCertificateV1Request, opts ...grpc.CallOption) (*CreateCertificateV1Response, error) {
	out := new(CreateCertificateV1Response)
	err := c.cc.Invoke(ctx, "/ocp.certificate.api.OcpCertificateApi/CreateCertificateV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCertificateApiClient) GetCertificateV1(ctx context.Context, in *GetCertificateV1Request, opts ...grpc.CallOption) (*GetCertificateV1Response, error) {
	out := new(GetCertificateV1Response)
	err := c.cc.Invoke(ctx, "/ocp.certificate.api.OcpCertificateApi/GetCertificateV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCertificateApiClient) ListCertificateV1(ctx context.Context, in *ListCertificateV1Request, opts ...grpc.CallOption) (*ListCertificateV1Response, error) {
	out := new(ListCertificateV1Response)
	err := c.cc.Invoke(ctx, "/ocp.certificate.api.OcpCertificateApi/ListCertificateV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ocpCertificateApiClient) UpdateCertificateV1(ctx context.Context, in *UpdateCertificateV1Request, opts ...grpc.CallOption) (*UpdateCertificateV1Response, error) {
	out := new(UpdateCertificateV1Response)
	err := c.cc.Invoke(ctx, "/ocp.certificate.api.OcpCertificateApi/UpdateCertificateV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OcpCertificateApiServer is the server API for OcpCertificateApi service.
// All implementations must embed UnimplementedOcpCertificateApiServer
// for forward compatibility
type OcpCertificateApiServer interface {
	MultiCreateCertificatesV1(context.Context, *MultiCreateCertificatesV1Request) (*MultiCreateCertificatesV1Response, error)
	CreateCertificateV1(context.Context, *CreateCertificateV1Request) (*CreateCertificateV1Response, error)
	GetCertificateV1(context.Context, *GetCertificateV1Request) (*GetCertificateV1Response, error)
	ListCertificateV1(context.Context, *ListCertificateV1Request) (*ListCertificateV1Response, error)
	UpdateCertificateV1(context.Context, *UpdateCertificateV1Request) (*UpdateCertificateV1Response, error)
	mustEmbedUnimplementedOcpCertificateApiServer()
}

// UnimplementedOcpCertificateApiServer must be embedded to have forward compatible implementations.
type UnimplementedOcpCertificateApiServer struct {
}

func (UnimplementedOcpCertificateApiServer) MultiCreateCertificatesV1(context.Context, *MultiCreateCertificatesV1Request) (*MultiCreateCertificatesV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateCertificatesV1 not implemented")
}
func (UnimplementedOcpCertificateApiServer) CreateCertificateV1(context.Context, *CreateCertificateV1Request) (*CreateCertificateV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCertificateV1 not implemented")
}
func (UnimplementedOcpCertificateApiServer) GetCertificateV1(context.Context, *GetCertificateV1Request) (*GetCertificateV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertificateV1 not implemented")
}
func (UnimplementedOcpCertificateApiServer) ListCertificateV1(context.Context, *ListCertificateV1Request) (*ListCertificateV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCertificateV1 not implemented")
}
func (UnimplementedOcpCertificateApiServer) UpdateCertificateV1(context.Context, *UpdateCertificateV1Request) (*UpdateCertificateV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCertificateV1 not implemented")
}
func (UnimplementedOcpCertificateApiServer) mustEmbedUnimplementedOcpCertificateApiServer() {}

// UnsafeOcpCertificateApiServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OcpCertificateApiServer will
// result in compilation errors.
type UnsafeOcpCertificateApiServer interface {
	mustEmbedUnimplementedOcpCertificateApiServer()
}

func RegisterOcpCertificateApiServer(s grpc.ServiceRegistrar, srv OcpCertificateApiServer) {
	s.RegisterService(&OcpCertificateApi_ServiceDesc, srv)
}

func _OcpCertificateApi_MultiCreateCertificatesV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateCertificatesV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCertificateApiServer).MultiCreateCertificatesV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.certificate.api.OcpCertificateApi/MultiCreateCertificatesV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCertificateApiServer).MultiCreateCertificatesV1(ctx, req.(*MultiCreateCertificatesV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCertificateApi_CreateCertificateV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateCertificateV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCertificateApiServer).CreateCertificateV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.certificate.api.OcpCertificateApi/CreateCertificateV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCertificateApiServer).CreateCertificateV1(ctx, req.(*CreateCertificateV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCertificateApi_GetCertificateV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCertificateV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCertificateApiServer).GetCertificateV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.certificate.api.OcpCertificateApi/GetCertificateV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCertificateApiServer).GetCertificateV1(ctx, req.(*GetCertificateV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCertificateApi_ListCertificateV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCertificateV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCertificateApiServer).ListCertificateV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.certificate.api.OcpCertificateApi/ListCertificateV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCertificateApiServer).ListCertificateV1(ctx, req.(*ListCertificateV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _OcpCertificateApi_UpdateCertificateV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateCertificateV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OcpCertificateApiServer).UpdateCertificateV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ocp.certificate.api.OcpCertificateApi/UpdateCertificateV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OcpCertificateApiServer).UpdateCertificateV1(ctx, req.(*UpdateCertificateV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// OcpCertificateApi_ServiceDesc is the grpc.ServiceDesc for OcpCertificateApi service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OcpCertificateApi_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ocp.certificate.api.OcpCertificateApi",
	HandlerType: (*OcpCertificateApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "MultiCreateCertificatesV1",
			Handler:    _OcpCertificateApi_MultiCreateCertificatesV1_Handler,
		},
		{
			MethodName: "CreateCertificateV1",
			Handler:    _OcpCertificateApi_CreateCertificateV1_Handler,
		},
		{
			MethodName: "GetCertificateV1",
			Handler:    _OcpCertificateApi_GetCertificateV1_Handler,
		},
		{
			MethodName: "ListCertificateV1",
			Handler:    _OcpCertificateApi_ListCertificateV1_Handler,
		},
		{
			MethodName: "UpdateCertificateV1",
			Handler:    _OcpCertificateApi_UpdateCertificateV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/ocp-certificate-api/ocp-certificate-api.proto",
}
