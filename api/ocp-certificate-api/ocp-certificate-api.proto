syntax = "proto3";

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "github.com/envoyproxy/protoc-gen-validate/validate/validate.proto";

option go_package = "github.com/ozoncp/ocp-certificate-api/pkg/ocp-certificate-api;ocp_certificate_api";

package ocp.certificate.api;

service OcpCertificateApi {
  rpc MultiCreateCertificatesV1(MultiCreateCertificatesV1Request) returns (MultiCreateCertificatesV1Response) {
    option (google.api.http) = {
      post: "/v1/certificates/list"
      body: "*"
    };
  }

  rpc CreateCertificateV1(CreateCertificateV1Request) returns (CreateCertificateV1Response) {
    option (google.api.http) = {
      post: "/v1/certificates"
      body: "*"
    };
  }

  rpc GetCertificateV1(GetCertificateV1Request) returns (GetCertificateV1Response) {
    option (google.api.http) = {
      get: "/v1/certificates/{certificate_id}"
    };
  }

  rpc ListCertificateV1(ListCertificateV1Request) returns (ListCertificateV1Response) {
    option (google.api.http) = {
      get: "/v1/certificates"
    };
  }

  rpc UpdateCertificateV1(UpdateCertificateV1Request) returns (UpdateCertificateV1Response) {
    option (google.api.http) = {
      put: "/v1/certificates"
      body: "*"
    };
  }

  rpc RemoveCertificateV1(RemoveCertificateV1Request) returns (RemoveCertificateV1Response) {
    option (google.api.http) = {
      delete: "/v1/certificates/{certificate_id}"
    };
  }
}

// Multi create
message MultiCreateCertificatesV1Request {
  repeated CreateCertificateV1Request certificates = 1 [(validate.rules).repeated.min_items = 1];
}

message MultiCreateCertificatesV1Response {
  repeated uint64 certificate_ids = 1 [(validate.rules).repeated.min_items = 1];
}

// Create
message CreateCertificateV1Request {
  uint64 user_id = 1 [(validate.rules).uint64.gt = 0];
  google.protobuf.Timestamp created = 2;
  string link = 3;
}

message CreateCertificateV1Response {
  uint64 certificate_id = 1;
}

// Read
message GetCertificateV1Request {
  uint64 certificate_id = 1 [(validate.rules).uint64.gt = 0];
}
message GetCertificateV1Response {
  UpdateCertificateV1Request certificate = 1;
}

// Read All
message ListCertificateV1Request {
  uint64 limit = 1 [(validate.rules).uint64.gt = 0];
  uint64 offset = 2 [(validate.rules).uint64.gt = 0];
}
message ListCertificateV1Response {
  repeated UpdateCertificateV1Request certificates = 1;
}

// Update
message UpdateCertificateV1Request {
  uint64 id = 1 [(validate.rules).uint64.gt = 0];
  uint64 user_id = 2 [(validate.rules).uint64.gt = 0];
  google.protobuf.Timestamp created = 3;
  string link = 4;
}
message UpdateCertificateV1Response {
  bool updated = 1;
}

// Delete
message RemoveCertificateV1Request {
  uint64 certificate_id = 1 [(validate.rules).uint64.gt = 0];
}
message RemoveCertificateV1Response {
  bool removed = 1;
}